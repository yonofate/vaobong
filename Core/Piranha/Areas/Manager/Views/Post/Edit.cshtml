@model Piranha.Models.Manager.PostModels.EditModel
@using Piranha.Extend;
@using Piranha.Models.Manager.PostModels;
@section Head {
    <script type="text/javascript" src="~/res.ashx/areas/manager/content/js/jquery.form.js"></script>
    <script type="text/javascript" src="~/res.ashx/areas/manager/content/js/jquery.attachment.js"></script>
    <script type="text/javascript" src="~/res.ashx/areas/manager/content/js/jquery.media.dialog.js"></script>
    <script type="text/javascript" src="~/res.ashx/areas/manager/content/js/jquery.comments.js"></script>
    <script type="text/javascript" src="~/res.ashx/areas/manager/content/js/ext/jquery.equalheights.js"></script>
    @Html.Partial("~/Areas/Manager/Views/Shared/Partial/TinyMCE.cshtml")
    <script type="text/javascript">
        var isFixed = false;
        var folderId = "";
        var deletemsg = "@Piranha.Resources.Post.MessageDeleteConfirm";

        $(document).ready(function () {
            // UI Stuff
            $("#Post_Title").focus();
            $('.first-row .box').equalHeights();

            @if (Model.Action == EditModel.ActionType.ATTACHMENTS) {
            <text>
            $('#btn_attachments').click();
            </text>
            }

            $("#PostCategories").chosen().change(function () {
                console.log("change");
                var container = $(this).siblings(".chzn-container");

                $.each($(this).find("option"), function (n, opt) {
                    $(opt).removeAttr("selected");
                    $.each(container.find(".result-selected"), function (i, e) {
                        if ($(e).html() == $(opt).html())
                            $(opt).attr("selected", "selected");
                    });
                });
            });

            //
            // Hides the attachment editor and shows the content body.
            //
            $("#btn_content").click(function () {
                $("#btn_attachments").removeClass("active");
                $("#btn_content").addClass("active");
                $("#attachments").hide();
                $("#body").show();
                return false;
            });

            new piranha.comment('@Model.Post.Id', 'comment-notification', 'pnl-comments .inner');
            new piranha.media('btn_attach', 'boxContent', function (a) {
                // Store folder id so we can open the same folder next time.
                folderId = a.ParentId;

                // Add the attachment
                $("#tbl-attachments").append(
                    '<tr data-id="' + a.Id + '">' +
                        '<td><img src="' + a.ThumbnailUrl + '/50" /></td>' +
                        '<td>' + a.DisplayName + '</td>' +
                        '<td>' + a.Type + '</td>' +
                        '<td class="buttons three">' +
                            '<a class="icon up marg"></a>' +
                            '<a class="icon down marg"></a>' +
                            '<a class="icon delete"></a></td>' +
                    '</tr>');
            });


            $(".toolbar .delete").click(function () {
            	return confirm(deletemsg);
            });
        });

        //
        // Hides all editors on the page. This callback is called from jquery.attachments.js
        //
        function hideEditors() {
            $("#btn_content").removeClass("active");
            $("#body").hide();
        }

        //
        // This callback is called from jquery.attachments.js before form submit.
        //
        function addAttachmentData(index, val) {
            $("#attachment_data").append(
                    '<input id="Post_Attachments_' + index +
                    '_" name="Post.Attachments[' + index +
                    ']" type="hidden" value="' + $(val).attr("data-id") + '" />');
        }
    </script>
}

@section Toolbar {
@Html.Partial("Partial/Tabs")
<div class="toolbar">
    <div class="inner">
        <ul>
            <li><a class="save submit">@Piranha.Resources.Global.ToolbarSaveDraft</a></li>
            @if (!Model.Post.IsNew) {
            <li><a href="@Piranha.WebPages.WebPiranha.GetSiteUrl()@Url.GetPermalink(Model.Post.Permalink, true)" target="preview" class="preview">@Piranha.Resources.Global.ToolbarPreview</a></li>
            }
            @if (User.HasAccess("ADMIN_POST_PUBLISH")) {
            <li><a class="publish">@(Model.Post.Published == DateTime.MinValue ? Piranha.Resources.Global.ToolbarPublish : Piranha.Resources.Global.ToolbarUpdate)</a></li>
            }
            @if (Model.Post.Published > DateTime.MinValue && User.HasAccess("ADMIN_POST_PUBLISH")) {
            <li><a href="@Url.Action("unpublish", new { id = Model.Post.Id })" class="unpublish">@Piranha.Resources.Global.ToolbarUnpublish</a></li>
            }
            @if (Model.Post.Published > DateTime.MinValue && Model.Post.Updated > Model.Post.LastPublished) {
            <li><a href="@Url.Action("revert", new { id = Model.Post.Id })" class="revert">@Piranha.Resources.Global.ToolbarRevert</a></li>
            }
            @if (User.HasAccess("ADMIN_POST_PUBLISH")) {
            if (String.IsNullOrEmpty(ViewBag.ReturnUrl)) {
            <li><a href="@Url.Action("delete", new { id = Model.Post.Id })" class="delete">@Piranha.Resources.Global.ToolbarDelete</a></li>
            } else {
            <li><a href="@Url.Action("delete", new { id = Model.Post.Id, returl = ViewBag.ReturnUrl })" class="delete">@Piranha.Resources.Global.ToolbarDelete</a></li>
            }
            }
            @if (String.IsNullOrEmpty(ViewBag.ReturnUrl)) {
            <li><a href="@Url.Action("index")" class="back">@Piranha.Resources.Global.ToolbarBack</a></li>
            } else {
            <li><a href="@ViewBag.ReturnUrl" class="back">@Piranha.Resources.Global.ToolbarBack</a></li>
            }
            <li><a href="@Url.Action("edit", new { id = Model.Post.Id })" class="refresh">@Piranha.Resources.Global.ToolbarReload</a></li>
            @Piranha.WebPages.Hooks.Manager.Toolbar.Render(Url, Model)
        </ul>
        <div class="clear"></div>
    </div>
</div>
}

@{ Html.BeginForm("edit", (string)ViewContext.RouteData.Values["Controller"]) ; }
<div>
    <input type="hidden" id="postid" value="@Model.Post.Id" />
    @Html.HiddenFor(m => m.Post.IsNew)
    @Html.HiddenFor(m => m.Post.Id)
    @Html.HiddenFor(m => m.Post.IsDraft)
    @Html.HiddenFor(m => m.Post.Permalink)
    @Html.HiddenFor(m => m.Post.TemplateId)
    @Html.HiddenFor(m => m.Post.PermalinkId)
    @Html.HiddenFor(m => m.Post.Created)
    @Html.HiddenFor(m => m.Post.Updated)
    @Html.HiddenFor(m => m.Post.Published)
    @Html.HiddenFor(m => m.Post.LastPublished)
    @Html.HiddenFor(m => m.Post.CreatedBy)
    @Html.HiddenFor(m => m.Post.UpdatedBy)
    @Html.HiddenFor(m => m.Permalink.IsNew)
    @Html.HiddenFor(m => m.Permalink.Id)
    @Html.HiddenFor(m => m.Permalink.NamespaceId)
    @Html.HiddenFor(m => m.Permalink.Type)
    @Html.HiddenFor(m => m.Permalink.Created)
    @Html.HiddenFor(m => m.Permalink.CreatedBy)
    @Html.Hidden("returl", (string)ViewBag.ReturnUrl)
    <input type="hidden" id="draft" name="draft" value="true" />
</div>
<div class="first-row">
    <div class="grid_9">
        <div class="box">
            <div class="title"><h2>@Piranha.Resources.Global.Information</h2></div>
            <div class="inner">
                <ul class="form">
                    <li>@Html.LabelFor(m => m.Post.Title)
                        <div class="input">
                            @Html.TextBoxFor(m => m.Post.Title)</div>
                        @Html.ValidationMessageFor(m => m.Post.Title)
                    </li>
                    <li class="protected">@Html.LabelFor(m => m.Post.Permalink)
                	    @if (!Model.Post.IsNew) {
                        <p>@Piranha.WebPages.WebPiranha.GetSiteUrl()@Url.GetPermalink(Model.Post.Permalink)</p>
                        } else {
                        <p><i>@Piranha.Resources.Post.PermalinkDescription</i></p>
                        }
                        <div class="input">
                            @Html.TextBoxFor(m => m.Permalink.Name)</div>
                        @Html.ValidationMessageFor(m => m.Permalink)
                        <a class="locked"></a>
                    </li>
                    <li>
                        @Html.LabelFor(m => m.Post.Excerpt)
                        <div class="input">
                            @Html.TextAreaFor(m => m.Post.Excerpt, new { @placeholder = Piranha.Resources.Global.Optional, @rows = 3 })</div>
                        @Html.ValidationMessageFor(m => m.Post.Excerpt)
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="grid_3">
        <div class="box pagetemplate">
            <div class="title"><h2>@Model.Template.Name</h2></div>
            <div class="inner">
                <div class="edit">
                    @Model.Template.Preview
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    <div class="grid_12">
        <div class="box main-content overflow">
            <table>
                <tr>
                    <td class="tools">
                        <ul>
                            <li class="btn-content active"><a href="#" data-id="pnl-content">@Piranha.Resources.Global.Content</a></li>
                            <li class="btn-settings"><a href="#" data-id="pnl-settings">@Piranha.Resources.Global.Settings</a></li>
                            @if (Model.Properties.Count > 0) {
                            <li class="btn-properties"><a href="#" data-id="pnl-properties">@Piranha.Resources.Global.Properties</a></li>
                            }
                            @if (Model.EnableComments) {
                            <li class="btn-comments">
                                @{
                                    var count = Model.Comments.Where(c => c.Status == Piranha.Entities.Comment.CommentStatus.New).Count() ;
                                }
                                <span @(count == 0 ? "style=display:none" : "") id="comment-notification" class="notification">@count</span>
                                <a href="#" data-id="pnl-comments">@Piranha.Resources.Global.Comments</a>
                            </li>
                            }
                            @foreach (var ext in Model.Extensions) {
                            <li>
                                <a href="#"@(ExtensionManager.Current.GetIconPathByType(ext.Type) != "" ? "style=background-image:url('" + 
                                Url.Content(ExtensionManager.Current.GetIconPathByType(ext.Type)) + "')" : "") data-id="pnl-@ExtensionManager.Current.GetInternalIdByType(ext.Type).ToLower()">
                                    @ExtensionManager.Current.GetNameByType(ext.Type)
                                </a>
                            </li>
                            }
                        </ul>
                    </td>
                    <td>
                        <div id="pnl-content" class="main content-editor">
                            <div class="title">
                                <div id="regionbuttons" class="buttons">
                                    <button id="btn_content" class="btn active">@Piranha.Resources.Global.Content</button>
                                    <button id="btn_attachments" class="btn">@Piranha.Resources.Page.Attachments</button>
                                </div>
                                <h2>@Piranha.Resources.Global.Content</h2>
                            </div>
                            <div class="inner region-body">
                                <div id="body">
                                    @Html.TextAreaFor(m => m.Post.Body, new { @class ="editor", @rows = 10 })
                                </div>
                                <div id="attachments" style="display:none">
                                    @Html.Partial("Partial/Attachments")
                                </div>
                            </div>
                        </div>
                        <div id="pnl-settings" class="main hidden">
                            <div class="title"><h2>@Piranha.Resources.Global.Settings</h2></div>
                            <div class="inner">
                                <ul class="form">
                                    <li>
                                        <label>@Piranha.Resources.Global.Categories</label>
                                        <div class="input">
                                        <select name="PostCategories" class="chzn-select" style="width:190px" multiple="multiple">
                                            @foreach (var opt in Model.Categories) {
                                            <option@(opt.Selected ? " selected=selected" : "") value="@opt.Value">@opt.Text</option>
                                            }
                                        </select></div>
                                    </li>
                                    <li>@Html.LabelFor(m => m.Post.Keywords)
                                        <div class="input"> 
                                            @Html.TextBoxFor(m => m.Post.Keywords, new { @placeholder = Piranha.Resources.Global.Optional })</div>
                                        @Html.ValidationMessageFor(m => m.Post.Keywords)
                                    </li>
                                    <li>@Html.LabelFor(m => m.Post.Description)
                                        <div class="input">
                                            @Html.TextAreaFor(m => m.Post.Description, new { @rows = 3, @placeholder = Piranha.Resources.Global.Optional })</div>
                                        @Html.ValidationMessageFor(m => m.Post.Description)
                                    </li>
                                    @if (Model.Template.ShowController) {
                                    <li>@Html.LabelFor(m => m.Post.PostController)
                                        <div class="input">
                                            @Html.TextBoxFor(m => m.Post.PostController, new { @placeholder = !String.IsNullOrEmpty(Model.Template.Controller) ? Model.Template.Controller : "Post" })</div>
                                        @Html.ValidationMessageFor(m => m.Post.PostController)
                                    </li>
                                    }
                                    @if (Piranha.Application.Current.IsMvc && Model.Template.ShowView) {
                                    <li>@Html.LabelFor(m => m.Post.PostView)
                                        <div class="input">
                                            @Html.TextBoxFor(m => m.Post.PostView, new { @placeholder = !String.IsNullOrEmpty(Model.Template.View) ? Model.Template.View : "Index" })</div>
                                        @Html.ValidationMessageFor(m => m.Post.PostView)
                                    </li>
                                    }
                                    <li>
                                        @Html.LabelFor(m => m.Post.AllowRss)
                                        <p>@Html.CheckBoxFor(m => m.Post.AllowRss) (@Piranha.Resources.Post.AllowRssDescription)</p>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        @if (Model.Properties.Count > 0) {
                        <div id="pnl-properties" class="main hidden">
                            <div class="title expanded"><h2>@Piranha.Resources.Global.Properties</h2></div>
                            <div class="inner optional">
                                <ul class="form">
                                @for (int n = 0; n < Model.Properties.Count; n++) {
                                    <li>@Html.LabelFor(m => m.Properties[n], Model.Properties[n].Name)
                                        @Html.HiddenFor(m => m.Properties[n].Id)
                                        @Html.HiddenFor(m => m.Properties[n].IsDraft)
                                        @Html.HiddenFor(m => m.Properties[n].ParentId)
                                        @Html.HiddenFor(m => m.Properties[n].Name)
                                        @Html.HiddenFor(m => m.Properties[n].Created)
                                        @Html.HiddenFor(m => m.Properties[n].CreatedBy)
                                        @Html.HiddenFor(m => m.Properties[n].IsNew)
                                        <div class="input">
                                            @Html.TextBoxFor(m => m.Properties[n].Value)</div>
                                    </li>
                                }
                                </ul>
                            </div>
                        </div>
                        }
                        @if (Model.EnableComments) {
                        <div id="pnl-comments" class="main content-editor hidden">
                            <div class="title"><h2>@Piranha.Resources.Global.Comments</h2></div>
                            <div class="inner region-body">
                                @Html.Partial("~/Areas/Manager/Views/Comment/List.cshtml", Model.Comments)
                            </div>
                        </div>
                        }
                        @Html.EditorFor(m => m.Extensions)
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<div class="grid_3">
    @if (!Model.Post.IsNew) {
    <div class="box expandable hidden">
        <div class="title"><h2>@Piranha.Resources.Global.Versioning</h2></div>
        <div class="inner optional">
            <ul class="list">
                <li>@Piranha.Resources.Global.LastPublished <small class="right">
                    @(Model.Post.LastPublished > DateTime.MinValue ? Model.Post.LastPublished.ToShortDateString() : "")</small></li>
                <li>@Piranha.Resources.Global.Published <small class="right">
                    @(Model.Post.Published > DateTime.MinValue ? Model.Post.Published.ToShortDateString() : "")</small></li>
                <li>@Piranha.Resources.Global.Updated <small class="right">@Model.Post.Updated.ToShortDateString()</small></li>
                <li>@Piranha.Resources.Global.Created <small class="right">@Model.Post.Created.ToShortDateString()</small></li>
            </ul>
        </div>
    </div>
    }
</div>
@{ Html.EndForm() ; }
@section Foot {
 <div id="boxContent" class="floatbox">
    <div class="bg"></div>
    <div class="box" style="min-width: 510px;min-height:260px;">
    </div>
</div>
}